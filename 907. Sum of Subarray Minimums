//APPROACH 1 - CLASSIC APPROACH FIND MINIMUM OF EACH SUBARRAY AND KEEP ADDING THEM
//APPROACH 2 - USING PSE AND PSE - FINDING INDIVIDUAL CONTRIBUTION OF EACH ELEMENT AS A MINIMUN ELEMENT IN A SUBARRAY AND MULTIPLYING IT BY THE ELEMENTS VALUE
class Solution {
public:
    vector<int> nextSmaller(vector<int> arr)
    {
        vector<int> nse(arr.size(),arr.size());
        stack<int> st;
        for(int i=arr.size()-1;i>=0;i--)
        {
            while(!st.empty() && arr[st.top()]>arr[i])
            {
                st.pop();
            }
            if(!st.empty()) nse[i]=st.top();
            st.push(i);
        }
        return nse;
    }
    vector<int> prevSmaller(vector<int> arr)
    {
        vector<int> pse(arr.size(),-1);
        stack<int> st;
        for(int i=0;i<arr.size();i++)
        {
            while(!st.empty() && arr[st.top()]>=arr[i])
            {
                st.pop();
            }
            if(!st.empty()) pse[i]=st.top();
            st.push(i);
        }
        return pse;
    }
    int sumSubarrayMins(vector<int>& arr) {
        vector<int> nse = nextSmaller(arr);
        vector<int> pse = prevSmaller(arr);
        const int mod = int(1e9 + 7);
        long long total = 0;
        for (int i = 0; i < arr.size(); i++) {
            long long left = i - pse[i];   
            long long right = nse[i] - i; 
            total = (total + (arr[i] * left % mod) * right % mod) % mod;
        }
        return total;
    } 
    
};
